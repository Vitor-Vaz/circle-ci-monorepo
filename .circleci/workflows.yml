version: 2.1

executors:
  minimal-elixir:
    docker:
      - image: &runtime hexpm/elixir:1.13.2-erlang-24.2.1-alpine-3.15.0
        environment:
          DOCKER_ENV: test
          MIX_ENV: test

aliases:
  - &mix_local_hex_and_rebar
    run: |
      mix local.hex --force
      mix local.rebar --force

orbs:
  azure-cli: circleci/azure-cli@1.1.0
  docker: circleci/docker@1.5.0

parameters:
  project-one-modified:
    type: boolean
    default: false
  project-two-modified:
    type: boolean
    default: false

commands:
  azure-cli-install-login:
    steps:
      - run:
          name: install azure cli
          command: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      - azure-cli/login-with-service-principal
  azure-functions-core-tools-install:
    steps:
      - run:
          name: install azure functions core tools
          command: |
            curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
            sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
            sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$(lsb_release -cs)-prod $(lsb_release -cs) main" > /etc/apt/sources.list.d/dotnetdev.list'
            sudo apt update
            sudo apt install -y --no-install-recommends azure-functions-core-tools-3

jobs:
  say-project-one:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: "Say hello Project One"
          command: "echo Project One Has Been Modified!"
  say-project-two:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: "Say hello Project two"
          command: "echo Project Two Has Been Modified!"
  build:
    executor: minimal-elixir
    parameters:
      path-to-build:
        type: string
    working_directory: << parameters.path-to-build>>
    steps:
      - checkout:
          path: ~/circle-ci-monorepo
      - run: apk add -U g++ git
      - *mix_local_hex_and_rebar
      - run: mix do deps.get, compile --warnings-as-errors
      - run: ls
      - run: pwd
      - persist_to_workspace:
          root: ~/circle-ci-monorepo
          paths:
            - project_one
  testing:
    executor: minimal-elixir
    parameters:
      path-to-comand:
        type: string
    working_directory: << parameters.path-to-comand >>
    steps: 
      - run: ls
      - run: pwd
      - *mix_local_hex_and_rebar
      - run: mix test

workflows:
  project-one-modified:
    when: << pipeline.parameters.project-one-modified>>
    jobs:
      - say-project-one
      - build:
          path-to-build: ~/circle-ci-monorepo/project_one
      - testing:
          path-to-comand: ~/project_one
          requires:
            - build
  project-two-modified:
    when: << pipeline.parameters.project-two-modified>>
    jobs:
      - say-project-two

